--------------refresh+close si oprire---------------------------------

TimerTask task = new TimerTask() {
            public void run() {
                initModel();
                System.out.println("refresh");
            }
        };
//Timer timer = new Timer("Timer");

long delay = 1000L;
timer.schedule(task, new Date(), delay);


timer.cancel();
timer.purge();
((Node)(event.getSource())).getScene().getWindow().hide();


-----------------------------------------random gen---------------------------------

Random rand = new Random();
int upperbound = 10000;
x=rand.nextInt(upperbound));


-----------------------------------update override

@Override
    public void update(UserEntityChangeEvent userEntityChangeEvent) {
        initModel();
    }

--------------------------- notify/fa initmodel()

notifyObservers(new UserEntityChangeEvent(ChangeEventType.DELETE, usr.get()));

------------------------------pt msj de validare-----------------------

MessageAlert.showMessage(null, Alert.AlertType.INFORMATION, "Info", "mesaj");


--------------------------------repo----------------------------------



@Override
    public Iterable<Section> findAll() {
        Set<Section> sections = new HashSet<>();
        try (Connection connection = DriverManager.getConnection(url, userName, password);
             PreparedStatement statement = connection.prepareStatement("SELECT * FROM sections");
             ResultSet resultSet = statement.executeQuery();) {
            while (resultSet.next()) {
                int id1 = resultSet.getInt("id");
                String name = resultSet.getString("name");
                int idChief = resultSet.getInt("idChief");
                int price = resultSet.getInt("price");
                int maxDuration = resultSet.getInt("maxDuration");
                Section section = new Section(id1, name,idChief,price,maxDuration);
                section.setId(id1);
                sections.add(section);

            }


        } catch (SQLException e) {
            e.printStackTrace();
        }
        return sections;
    }

    @Override
    public Section save(Section entity) {

        String sql = "insert into sections(id, name, idChief, price, maxDuration) values(?, ?, ?, ?, ?)";

        try (Connection connection = DriverManager.getConnection(url, userName, password);
             PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, entity.getId());
            ps.setString(2, entity.getName());
            ps.setInt(3, entity.getIdSectionChief());
            ps.setInt(4, entity.getPricePerCheckup());
            ps.setInt(5, entity.getMaxDurationCheckup());
            ps.executeUpdate();

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return entity;
    }
























-----------------------------proj nev pers
package com.example.login2.domain;

public class Persoana extends Entity<Integer>{
    private String nume;
    private String prenume;
    private String username;
    private String parola;
    TipuriOrase oras;
    private String strada;
    private String nr_strada;
    private String telefon;

    public Persoana(Integer integer, String nume, String prenume, String username, String parola, TipuriOrase oras, String strada, String nr_strada, String telefon) {
        super(integer);
        this.nume = nume;
        this.prenume = prenume;
        this.username = username;
        this.parola = parola;
        this.oras = oras;
        this.strada = strada;
        this.nr_strada = nr_strada;
        this.telefon = telefon;
    }

    public String getNume() {
        return nume;
    }

    public void setNume(String nume) {
        this.nume = nume;
    }

    public String getPrenume() {
        return prenume;
    }

    public void setPrenume(String prenume) {
        this.prenume = prenume;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getParola() {
        return parola;
    }

    public void setParola(String parola) {
        this.parola = parola;
    }

    public TipuriOrase getOras() {
        return oras;
    }

    public void setOras(TipuriOrase oras) {
        this.oras = oras;
    }

    public String getStrada() {
        return strada;
    }

    public void setStrada(String strada) {
        this.strada = strada;
    }

    public String getNr_strada() {
        return nr_strada;
    }

    public void setNr_strada(String nr_strada) {
        this.nr_strada = nr_strada;
    }

    public String getTelefon() {
        return telefon;
    }

    public void setTelefon(String telefon) {
        this.telefon = telefon;
    }

    @Override
    public String toString() {
        return "Persoana{" +
                "nume='" + nume + '\'' +
                ", prenume='" + prenume + '\'' +
                ", username='" + username + '\'' +
                ", parola='" + parola + '\'' +
                ", oras=" + oras +
                ", strada='" + strada + '\'' +
                ", nr_strada='" + nr_strada + '\'' +
                ", telefon='" + telefon + '\'' +
                '}';
    }
}



-------------------------------proj nev nev




import java.time.LocalDateTime;

public class Nevoie extends Entity<Integer>{
    private String titlu;
    private String descriere;
    private LocalDateTime deadline;
    private Integer ominNevoie;
    private  Integer onSalvator;
    private String status;

    public Nevoie(Integer integer, String titlu, String descriere, LocalDateTime deadline, Integer ominNevoie, Integer onSalvator, String status) {
        super(integer);
        this.titlu = titlu;
        this.descriere = descriere;
        this.deadline = deadline;
        this.ominNevoie = ominNevoie;
        this.onSalvator = onSalvator;
        this.status = status;
    }

    public String getTitlu() {
        return titlu;
    }

    public void setTitlu(String titlu) {
        this.titlu = titlu;
    }

    public String getDescriere() {
        return descriere;
    }

    public void setDescriere(String descriere) {
        this.descriere = descriere;
    }

    public LocalDateTime getDeadline() {
        return deadline;
    }

    public void setDeadline(LocalDateTime deadline) {
        this.deadline = deadline;
    }

    public Integer getOminNevoie() {
        return ominNevoie;
    }

    public void setOminNevoie(Integer ominNevoie) {
        this.ominNevoie = ominNevoie;
    }

    public Integer getOnSalvator() {
        return onSalvator;
    }

    public void setOnSalvator(Integer onSalvator) {
        this.onSalvator = onSalvator;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    @Override
    public String toString() {
        return "Nevoie{" +
                "titlu='" + titlu + '\'' +
                ", descriere='" + descriere + '\'' +
                ", deadline=" + deadline +
                ", ominNevoie=" + ominNevoie +
                ", onSalvator=" + onSalvator +
                ", status='" + status + '\'' +
                '}';
    }
}























